# This function uses filtering and moving average to find the strongest peak at 40kHz
# Inputs:	doPlot: Set to one if one wants to plot the DSP steps
# 			input: Is the input signal

# Output:	The funtion returns the data point in which the maximum peak is after
#			Filtering and moving average calculations have been performed

#Note: 		The function is based on input signals with Fs = 250kHz, this is  
# 			important with regard to the bandpassfilter that is being used. 

# Author: Frikk Herding Solberg, for OpenROV


import math
import numpy
import matplotlib.pyplot as plt

def getPeak(doPlot, input = [], *args):
	Fs = 250000;
	h = [0.000889391454733145, 0.000808236768945616, -0.000910333473145078, -0.00189364342561422, -0.000561282128644839, 0.00238658555092604, 0.00248405123291128, -0.000715247458004567, -0.00328505939596145, -0.00149530633876708, 0.00164874217293225, 0.00189504834400762, 1.11874228307383e-05, 0.000208736898276242, 0.00133486207822560, -0.00109223378267695, -0.00530364874233792, -0.00291577005278782, 0.00637970761818405, 0.00998151379300436, -0.000329947758124196, -0.0125888156586640, -0.00930724550342489, 0.00629687989525885, 0.0132219494058328, 0.00336363531924705, -0.00758404369356272, -0.00581021046804391, 0.000427426136088345, -0.000979713008174254, -0.00303718269147988, 0.00576568325212989, 0.0143902306941538, 0.00291385308960260, -0.0195158340156996, -0.0199829742826965, 0.00754065611453010, 0.0267641400437302, 0.0114182947762631, -0.0144428093113171, -0.0154169254736620, -0.000249257650535012, -0.000142444069219341, -0.00789740676854597, 0.00937448468570990, 0.0373555365385171, 0.0176076344854300,-0.0502365595988475, -0.0730391914197814, 0.00907946329488766, 0.105615288311895, 0.0748064224604209, -0.0673358378393079, -0.138546562616726, -0.0317972926206872, 0.122882155306267, 0.122882155306267, -0.0317972926206872, -0.138546562616726, -0.0673358378393079, 0.0748064224604209, 0.105615288311895, 0.00907946329488766, -0.0730391914197814, -0.0502365595988475, 0.0176076344854300, 0.0373555365385171, 0.00937448468570990, -0.00789740676854597, -0.000142444069219341, -0.000249257650535012, -0.0154169254736620, -0.0144428093113171, 0.0114182947762631, 0.0267641400437302, 0.00754065611453010, -0.0199829742826965, -0.0195158340156996, 0.00291385308960260, 0.0143902306941538, 0.00576568325212989, -0.00303718269147988, -0.000979713008174254, 0.000427426136088345, -0.00581021046804391, -0.00758404369356272, 0.00336363531924705, 0.0132219494058328, 0.00629687989525885, -0.00930724550342489, -0.0125888156586640, -0.000329947758124196, 0.00998151379300436, 0.00637970761818405, -0.00291577005278782, -0.00530364874233792, -0.00109223378267695, 0.00133486207822560, 0.000208736898276242, 1.11874228307383e-05, 0.00189504834400762, 0.00164874217293225, -0.00149530633876708, -0.00328505939596145, -0.000715247458004567, 0.00248405123291128, 0.00238658555092604, -0.000561282128644839, -0.00189364342561422, -0.000910333473145078, 0.000808236768945616, 0.000889391454733145];
	delay = math.floor((len(h))/2);

	dataFiltered = numpy.convolve(input, h, mode='full');
	dataDelayed = numpy.array([dataFiltered[delay:]]);
	dataDelayed = dataDelayed.flatten()
	dataAbsed = numpy.absolute(dataDelayed);

	dataAbsed = dataAbsed.flatten()

	#Calculating Moving Average
	movAvgParam = 30; #How many elements to include per moving average point
	dataMovAvg = numpy.zeros(len(dataAbsed));
	for i in range(0,len(dataAbsed)):
		start = i - movAvgParam;
		finish = i + movAvgParam;
		
		if start < 1:
			start = 1;
		if finish > len(dataAbsed):
			finish = len(dataAbsed);

		dataMovAvg[i] = numpy.mean(dataAbsed[start:finish]);


	#Calculating max value of moving average 
	maxPos = 0;
	maxVal = 0;
	for i in range(1,len(dataMovAvg)):
		if dataMovAvg[i] > maxVal: 
			maxVal = dataMovAvg[i];
			maxPos = i;


	#Plotting several plots of doPlot = 1
	if doPlot == 1:
		plt.figure(1)
		plt.subplot(411)
		plt.title('Input')
		plt.plot(input)
		plt.subplot(412)
		plt.title('Filtered data')
		plt.plot(dataDelayed[0:len(input)])
		plt.subplot(413)
		plt.title('Absed data')
		plt.plot(dataAbsed[0:len(input)])
		plt.subplot(414)
		plt.title('Moving average')
		plt.plot(dataMovAvg[0:len(input)])
		plt.show()
	

	return maxPos;







